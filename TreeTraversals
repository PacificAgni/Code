import java.util.*;
class Node{
    int data;
    Node left;
    Node right;
    public Node(int key)
    {
        this.data=key;
    }
    
}

public class TreeTraversals
{
    public static void preorder(Node root)
    {
        if(root==null)
        return;
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }
    
    public static void postorder(Node root)
    {
        if(root==null)
        return;
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+" ");
    }
    
     public static void inorder(Node root)
    {
        if(root==null)
        return;
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
        
    }
    public static void levelorder(Node root)
    {
      if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            Node current = queue.poll();
            System.out.print(current.data + " ");

            if (current.left != null)
                queue.offer(current.left);

            if (current.right != null)
                queue.offer(current.right);
        }
        
    }
    public static void addleft(Node root,Node left)
    {
        root.left=left;
    }
     public static void addright(Node root,Node right)
    {
        root.right=right;
    }
	public static void main(String[] args) {
		 Node root=new Node(1);
		 addleft(root,new Node(2));
		 addright(root,new Node(3));
		addleft(root.left,new Node(4));
		addright(root.left,new Node(5));
		addright(root.right,new Node(6));
		System.out.print("PREORDER:- ");
		preorder(root);
		System.out.println();
		System.out.print("POSTORDER:- ");
		postorder(root);
		System.out.println();
		System.out.print("INORDER:- ");
		inorder(root);
		System.out.println();
		System.out.print("LEVELORDER:- ");
		levelorder(root);
	}
}
